{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// 🏗️ ZUSTAND AUTH STORE - CENTRALIZED AUTHENTICATION MANAGEMENT\n// This file replaces Context API and manages ALL authentication logic in one place\n\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport axios from 'axios';\n\n// 🏠 MAIN AUTH STORE - This is the \"Central Bank\" for all authentication\nexport const useAuthStore = create(persist((set, get) => ({\n  // 📊 AUTH STATE - All authentication data stored here\n  user: null,\n  // Current user object (name, email, role, etc.)\n  token: null,\n  // JWT token for API authentication\n  isAuthenticated: false,\n  // Boolean: is user logged in?\n  loading: false,\n  // Boolean: is auth operation in progress?\n  error: null,\n  // String: any auth error messages\n\n  // 🔧 HELPER ACTIONS - Internal utility functions\n\n  // 🔑 Token Management - Handles localStorage and axios headers\n  setAuthToken: token => {\n    console.log('🔑 Setting auth token:', token ? 'Token provided' : 'Removing token');\n    if (token) {\n      // ✅ LOGIN FLOW: Set token in axios headers for all future API calls\n      axios.defaults.headers.common['x-auth-token'] = token;\n      localStorage.setItem('token', token);\n      set({\n        token\n      });\n      console.log('✅ Token saved to localStorage and axios headers');\n    } else {\n      // ❌ LOGOUT FLOW: Remove token from everywhere\n      delete axios.defaults.headers.common['x-auth-token'];\n      localStorage.removeItem('token');\n      set({\n        token: null\n      });\n      console.log('❌ Token removed from localStorage and axios headers');\n    }\n  },\n  // 📱 Loading State Management\n  setLoading: loading => {\n    console.log('⏳ Setting loading state:', loading);\n    set({\n      loading\n    });\n  },\n  // ❌ Error Management\n  setError: error => {\n    console.log('🚨 Setting error:', error);\n    set({\n      error,\n      loading: false\n    });\n  },\n  clearError: () => {\n    console.log('🧹 Clearing error');\n    set({\n      error: null\n    });\n  },\n  // 🚀 MAIN AUTH ACTIONS - Public functions used by components\n\n  // 📥 LOAD USER - Check if token is valid and get user data\n  loadUser: async () => {\n    console.log('🔄 Loading user from token...');\n    const {\n      token,\n      setAuthToken\n    } = get();\n\n    // Step 1: Check if we have a token\n    if (!token) {\n      console.log('❌ No token found, user not authenticated');\n      set({\n        loading: false,\n        isAuthenticated: false\n      });\n      return;\n    }\n\n    // Step 2: Set loading state and configure axios\n    set({\n      loading: true,\n      error: null\n    });\n    setAuthToken(token);\n    console.log('🔧 Token set in axios, making API request...');\n    try {\n      // Step 3: Call backend to validate token and get user data\n      const response = await axios.get('/api/auth/profile');\n      console.log('✅ User loaded successfully:', response.data.data);\n\n      // Step 4: Update state with user data\n      set({\n        user: response.data.data,\n        isAuthenticated: true,\n        loading: false,\n        error: null\n      });\n    } catch (error) {\n      var _error$response;\n      console.error('❌ Failed to load user:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n\n      // Step 5: Token is invalid, clear everything\n      const {\n        setAuthToken\n      } = get();\n      setAuthToken(null);\n      set({\n        user: null,\n        isAuthenticated: false,\n        loading: false,\n        error: 'Session expired. Please login again.'\n      });\n    }\n  },\n  // 📝 REGISTER - Create new user account\n  register: async userData => {\n    console.log('📝 Starting registration for:', userData.email);\n    const {\n      setAuthToken\n    } = get();\n    set({\n      loading: true,\n      error: null\n    });\n    try {\n      // Step 1: Send registration data to backend\n      console.log('📤 Sending registration request...');\n      const response = await axios.post('/api/auth/register', userData);\n      const {\n        token,\n        user\n      } = response.data.data;\n      console.log('✅ Registration successful for user:', user.name);\n\n      // Step 2: Save token and user data\n      setAuthToken(token);\n      set({\n        user,\n        isAuthenticated: true,\n        loading: false,\n        error: null\n      });\n      console.log('🎉 User registered and logged in successfully');\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response2, _error$response3, _error$response3$data, _error$response3$data2;\n      console.error('❌ Registration failed:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n      const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : (_error$response3$data2 = _error$response3$data.error) === null || _error$response3$data2 === void 0 ? void 0 : _error$response3$data2.message) || 'Registration failed';\n      set({\n        loading: false,\n        error: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  },\n  // 🔑 LOGIN - Authenticate existing user\n  login: async credentials => {\n    console.log('🔑 Starting login for:', credentials.email);\n    const {\n      setAuthToken\n    } = get();\n    set({\n      loading: true,\n      error: null\n    });\n    try {\n      // Step 1: Send login credentials to backend\n      console.log('📤 Sending login request...');\n      const response = await axios.post('/api/auth/login', credentials);\n      const {\n        token,\n        user\n      } = response.data.data;\n      console.log('✅ Login successful for user:', user.name);\n\n      // Step 2: Save token and user data\n      setAuthToken(token);\n      set({\n        user,\n        isAuthenticated: true,\n        loading: false,\n        error: null\n      });\n      console.log('🎉 User logged in successfully');\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response4, _error$response5, _error$response5$data, _error$response5$data2;\n      console.error('❌ Login failed:', ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n      const errorMessage = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : (_error$response5$data2 = _error$response5$data.error) === null || _error$response5$data2 === void 0 ? void 0 : _error$response5$data2.message) || 'Login failed';\n      set({\n        loading: false,\n        error: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  },\n  // 📝 UPDATE PROFILE - Update user information\n  updateProfile: async profileData => {\n    var _get$user;\n    console.log('📝 Updating profile for user:', (_get$user = get().user) === null || _get$user === void 0 ? void 0 : _get$user.name);\n    set({\n      loading: true,\n      error: null\n    });\n    try {\n      // Step 1: Send update request to backend\n      console.log('📤 Sending profile update request...');\n      const response = await axios.put('/api/auth/profile', profileData);\n      console.log('✅ Profile updated successfully');\n\n      // Step 2: Update user data in store\n      set({\n        user: response.data.data,\n        loading: false,\n        error: null\n      });\n      console.log('🔄 Profile data refreshed in store');\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response6, _error$response7, _error$response7$data, _error$response7$data2;\n      console.error('❌ Profile update failed:', ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message);\n      const errorMessage = ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : (_error$response7$data2 = _error$response7$data.error) === null || _error$response7$data2 === void 0 ? void 0 : _error$response7$data2.message) || 'Update failed';\n      set({\n        loading: false,\n        error: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  },\n  // 🚪 LOGOUT - Clear all authentication data\n  logout: () => {\n    var _get$user2;\n    console.log('🚪 Logging out user:', (_get$user2 = get().user) === null || _get$user2 === void 0 ? void 0 : _get$user2.name);\n    const {\n      setAuthToken\n    } = get();\n\n    // Step 1: Remove token from everywhere\n    setAuthToken(null);\n\n    // Step 2: Clear all auth state\n    set({\n      user: null,\n      isAuthenticated: false,\n      loading: false,\n      error: null\n    });\n    console.log('✅ User logged out successfully');\n  }\n}), {\n  // 💾 PERSISTENCE CONFIG - Save token to localStorage\n  name: 'farm-to-home-auth',\n  // localStorage key name\n  partialize: state => ({\n    token: state.token // Only persist token, not user data\n  }),\n  onRehydrateStorage: () => {\n    console.log('🔄 Rehydrating auth state from localStorage...');\n    return (state, error) => {\n      if (error) {\n        console.error('❌ Failed to rehydrate auth state:', error);\n      } else {\n        console.log('✅ Auth state rehydrated, token found:', !!(state !== null && state !== void 0 && state.token));\n      }\n    };\n  }\n}));\n\n// 🎯 SELECTOR HOOKS - Optimized hooks for specific data (prevents unnecessary re-renders)\n\n// Get only user data (components using this only re-render when user changes)\nexport const useAuthUser = () => {\n  _s();\n  return useAuthStore(state => state.user);\n};\n\n// Get only auth status (components using this only re-render when status changes)\n_s(useAuthUser, \"BSK3XewfuZPixDP8tbzcobpulFc=\", false, function () {\n  return [useAuthStore];\n});\nexport const useAuthStatus = () => {\n  _s2();\n  return useAuthStore(state => ({\n    isAuthenticated: state.isAuthenticated,\n    loading: state.loading,\n    error: state.error\n  }));\n};\n\n// Get only auth actions (components using this never re-render)\n_s2(useAuthStatus, \"BSK3XewfuZPixDP8tbzcobpulFc=\", false, function () {\n  return [useAuthStore];\n});\nexport const useAuthActions = () => {\n  _s3();\n  return useAuthStore(state => ({\n    login: state.login,\n    register: state.register,\n    logout: state.logout,\n    updateProfile: state.updateProfile,\n    loadUser: state.loadUser,\n    clearError: state.clearError\n  }));\n};\n\n// 🚀 INITIALIZE AUTH - Load user on app start\n_s3(useAuthActions, \"BSK3XewfuZPixDP8tbzcobpulFc=\", false, function () {\n  return [useAuthStore];\n});\nconsole.log('🚀 Initializing auth store...');\nuseAuthStore.getState().loadUser();","map":{"version":3,"names":["create","persist","axios","useAuthStore","set","get","user","token","isAuthenticated","loading","error","setAuthToken","console","log","defaults","headers","common","localStorage","setItem","removeItem","setLoading","setError","clearError","loadUser","response","data","_error$response","message","register","userData","email","post","name","success","_error$response2","_error$response3","_error$response3$data","_error$response3$data2","errorMessage","login","credentials","_error$response4","_error$response5","_error$response5$data","_error$response5$data2","updateProfile","profileData","_get$user","put","_error$response6","_error$response7","_error$response7$data","_error$response7$data2","logout","_get$user2","partialize","state","onRehydrateStorage","useAuthUser","_s","useAuthStatus","_s2","useAuthActions","_s3","getState"],"sources":["C:/all/React-project/FARMTOHOME/frontend/src/store/authStore.js"],"sourcesContent":["// 🏗️ ZUSTAND AUTH STORE - CENTRALIZED AUTHENTICATION MANAGEMENT\r\n// This file replaces Context API and manages ALL authentication logic in one place\r\n\r\nimport { create } from 'zustand';\r\nimport { persist } from 'zustand/middleware';\r\nimport axios from 'axios';\r\n\r\n// 🏠 MAIN AUTH STORE - This is the \"Central Bank\" for all authentication\r\nexport const useAuthStore = create(\r\n  persist(\r\n    (set, get) => ({\r\n      // 📊 AUTH STATE - All authentication data stored here\r\n      user: null,              // Current user object (name, email, role, etc.)\r\n      token: null,             // JWT token for API authentication\r\n      isAuthenticated: false,  // Boolean: is user logged in?\r\n      loading: false,          // Boolean: is auth operation in progress?\r\n      error: null,             // String: any auth error messages\r\n\r\n      // 🔧 HELPER ACTIONS - Internal utility functions\r\n      \r\n      // 🔑 Token Management - Handles localStorage and axios headers\r\n      setAuthToken: (token) => {\r\n        console.log('🔑 Setting auth token:', token ? 'Token provided' : 'Removing token');\r\n        \r\n        if (token) {\r\n          // ✅ LOGIN FLOW: Set token in axios headers for all future API calls\r\n          axios.defaults.headers.common['x-auth-token'] = token;\r\n          localStorage.setItem('token', token);\r\n          set({ token });\r\n          console.log('✅ Token saved to localStorage and axios headers');\r\n        } else {\r\n          // ❌ LOGOUT FLOW: Remove token from everywhere\r\n          delete axios.defaults.headers.common['x-auth-token'];\r\n          localStorage.removeItem('token');\r\n          set({ token: null });\r\n          console.log('❌ Token removed from localStorage and axios headers');\r\n        }\r\n      },\r\n\r\n      // 📱 Loading State Management\r\n      setLoading: (loading) => {\r\n        console.log('⏳ Setting loading state:', loading);\r\n        set({ loading });\r\n      },\r\n      \r\n      // ❌ Error Management\r\n      setError: (error) => {\r\n        console.log('🚨 Setting error:', error);\r\n        set({ error, loading: false });\r\n      },\r\n      \r\n      clearError: () => {\r\n        console.log('🧹 Clearing error');\r\n        set({ error: null });\r\n      },\r\n\r\n      // 🚀 MAIN AUTH ACTIONS - Public functions used by components\r\n\r\n      // 📥 LOAD USER - Check if token is valid and get user data\r\n      loadUser: async () => {\r\n        console.log('🔄 Loading user from token...');\r\n        const { token, setAuthToken } = get();\r\n        \r\n        // Step 1: Check if we have a token\r\n        if (!token) {\r\n          console.log('❌ No token found, user not authenticated');\r\n          set({ loading: false, isAuthenticated: false });\r\n          return;\r\n        }\r\n\r\n        // Step 2: Set loading state and configure axios\r\n        set({ loading: true, error: null });\r\n        setAuthToken(token);\r\n        console.log('🔧 Token set in axios, making API request...');\r\n\r\n        try {\r\n          // Step 3: Call backend to validate token and get user data\r\n          const response = await axios.get('/api/auth/profile');\r\n          console.log('✅ User loaded successfully:', response.data.data);\r\n          \r\n          // Step 4: Update state with user data\r\n          set({\r\n            user: response.data.data,\r\n            isAuthenticated: true,\r\n            loading: false,\r\n            error: null\r\n          });\r\n          \r\n        } catch (error) {\r\n          console.error('❌ Failed to load user:', error.response?.data || error.message);\r\n          \r\n          // Step 5: Token is invalid, clear everything\r\n          const { setAuthToken } = get();\r\n          setAuthToken(null);\r\n          set({\r\n            user: null,\r\n            isAuthenticated: false,\r\n            loading: false,\r\n            error: 'Session expired. Please login again.'\r\n          });\r\n        }\r\n      },\r\n\r\n      // 📝 REGISTER - Create new user account\r\n      register: async (userData) => {\r\n        console.log('📝 Starting registration for:', userData.email);\r\n        const { setAuthToken } = get();\r\n        set({ loading: true, error: null });\r\n\r\n        try {\r\n          // Step 1: Send registration data to backend\r\n          console.log('📤 Sending registration request...');\r\n          const response = await axios.post('/api/auth/register', userData);\r\n          const { token, user } = response.data.data;\r\n          console.log('✅ Registration successful for user:', user.name);\r\n\r\n          // Step 2: Save token and user data\r\n          setAuthToken(token);\r\n          set({\r\n            user,\r\n            isAuthenticated: true,\r\n            loading: false,\r\n            error: null\r\n          });\r\n\r\n          console.log('🎉 User registered and logged in successfully');\r\n          return { success: true, data: response.data };\r\n\r\n        } catch (error) {\r\n          console.error('❌ Registration failed:', error.response?.data || error.message);\r\n          const errorMessage = error.response?.data?.error?.message || 'Registration failed';\r\n          \r\n          set({\r\n            loading: false,\r\n            error: errorMessage\r\n          });\r\n          \r\n          return { success: false, error: errorMessage };\r\n        }\r\n      },\r\n\r\n      // 🔑 LOGIN - Authenticate existing user\r\n      login: async (credentials) => {\r\n        console.log('🔑 Starting login for:', credentials.email);\r\n        const { setAuthToken } = get();\r\n        set({ loading: true, error: null });\r\n\r\n        try {\r\n          // Step 1: Send login credentials to backend\r\n          console.log('📤 Sending login request...');\r\n          const response = await axios.post('/api/auth/login', credentials);\r\n          const { token, user } = response.data.data;\r\n          console.log('✅ Login successful for user:', user.name);\r\n\r\n          // Step 2: Save token and user data\r\n          setAuthToken(token);\r\n          set({\r\n            user,\r\n            isAuthenticated: true,\r\n            loading: false,\r\n            error: null\r\n          });\r\n\r\n          console.log('🎉 User logged in successfully');\r\n          return { success: true, data: response.data };\r\n\r\n        } catch (error) {\r\n          console.error('❌ Login failed:', error.response?.data || error.message);\r\n          const errorMessage = error.response?.data?.error?.message || 'Login failed';\r\n          \r\n          set({\r\n            loading: false,\r\n            error: errorMessage\r\n          });\r\n          \r\n          return { success: false, error: errorMessage };\r\n        }\r\n      },\r\n\r\n      // 📝 UPDATE PROFILE - Update user information\r\n      updateProfile: async (profileData) => {\r\n        console.log('📝 Updating profile for user:', get().user?.name);\r\n        set({ loading: true, error: null });\r\n\r\n        try {\r\n          // Step 1: Send update request to backend\r\n          console.log('📤 Sending profile update request...');\r\n          const response = await axios.put('/api/auth/profile', profileData);\r\n          console.log('✅ Profile updated successfully');\r\n\r\n          // Step 2: Update user data in store\r\n          set({\r\n            user: response.data.data,\r\n            loading: false,\r\n            error: null\r\n          });\r\n\r\n          console.log('🔄 Profile data refreshed in store');\r\n          return { success: true, data: response.data };\r\n\r\n        } catch (error) {\r\n          console.error('❌ Profile update failed:', error.response?.data || error.message);\r\n          const errorMessage = error.response?.data?.error?.message || 'Update failed';\r\n          \r\n          set({\r\n            loading: false,\r\n            error: errorMessage\r\n          });\r\n          \r\n          return { success: false, error: errorMessage };\r\n        }\r\n      },\r\n\r\n      // 🚪 LOGOUT - Clear all authentication data\r\n      logout: () => {\r\n        console.log('🚪 Logging out user:', get().user?.name);\r\n        const { setAuthToken } = get();\r\n        \r\n        // Step 1: Remove token from everywhere\r\n        setAuthToken(null);\r\n        \r\n        // Step 2: Clear all auth state\r\n        set({\r\n          user: null,\r\n          isAuthenticated: false,\r\n          loading: false,\r\n          error: null\r\n        });\r\n        \r\n        console.log('✅ User logged out successfully');\r\n      }\r\n    }),\r\n    {\r\n      // 💾 PERSISTENCE CONFIG - Save token to localStorage\r\n      name: 'farm-to-home-auth', // localStorage key name\r\n      partialize: (state) => ({ \r\n        token: state.token  // Only persist token, not user data\r\n      }),\r\n      onRehydrateStorage: () => {\r\n        console.log('🔄 Rehydrating auth state from localStorage...');\r\n        return (state, error) => {\r\n          if (error) {\r\n            console.error('❌ Failed to rehydrate auth state:', error);\r\n          } else {\r\n            console.log('✅ Auth state rehydrated, token found:', !!state?.token);\r\n          }\r\n        };\r\n      }\r\n    }\r\n  )\r\n);\r\n\r\n// 🎯 SELECTOR HOOKS - Optimized hooks for specific data (prevents unnecessary re-renders)\r\n\r\n// Get only user data (components using this only re-render when user changes)\r\nexport const useAuthUser = () => useAuthStore(state => state.user);\r\n\r\n// Get only auth status (components using this only re-render when status changes)\r\nexport const useAuthStatus = () => useAuthStore(state => ({\r\n  isAuthenticated: state.isAuthenticated,\r\n  loading: state.loading,\r\n  error: state.error\r\n}));\r\n\r\n// Get only auth actions (components using this never re-render)\r\nexport const useAuthActions = () => useAuthStore(state => ({\r\n  login: state.login,\r\n  register: state.register,\r\n  logout: state.logout,\r\n  updateProfile: state.updateProfile,\r\n  loadUser: state.loadUser,\r\n  clearError: state.clearError\r\n}));\r\n\r\n// 🚀 INITIALIZE AUTH - Load user on app start\r\nconsole.log('🚀 Initializing auth store...');\r\nuseAuthStore.getState().loadUser(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}